class IMatRenderContext
{
public:
	/*0*/   virtual void	BeginRender() = 0;
	/*1*/	virtual void	EndRender() = 0;
	/*2*/	virtual void	Flush(bool flushHardware = false) = 0;
	/*3*/	virtual void	BindLocalCubemap(ITexture *pTexture) = 0;
	/*4*/	virtual void	SetRenderTarget(ITexture *pTexture) = 0;
	/*5*/	virtual ITexture * GetRenderTarget(void) = 0;
	/*6*/	virtual void	GetRenderTargetDimensions(int &width, int &height) const = 0;
	/*7*/	virtual void	Bind(IMaterial *material, void *proxyData = 0) = 0;
	/*8*/	virtual void	BindLightmapPage(int lightmapPageID) = 0;
	/*9*/	virtual void	DepthRange(float zNear, float zFar) = 0;
	/*10*/	virtual void	ClearBuffers(bool bClearColor, bool bClearDepth, bool bClearStencil = false) = 0;
	/*11*/	virtual void	ReadPixels(int x, int y, int width, int height, unsigned char *data, ImageFormat dstFormat) = 0; 
	/*12*/	virtual void	SetAmbientLight(float r, float g, float b) = 0;
	/*13*/	virtual void	SetLight(int lightNum, const LightDesc_t& desc) = 0;
	/*14*/	virtual void	SetAmbientLightCube(Vector4D cube[6]) = 0;
	/*15*/	virtual void	CopyRenderTargetToTexture(ITexture *pTexture) = 0;
	/*16*/	virtual void	SetFrameBufferCopyTexture(ITexture *pTexture, int textureIndex = 0) = 0;
	/*17*/	virtual ITexture *GetFrameBufferCopyTexture(int textureIndex) = 0;
	/*18*/	virtual void	MatrixMode(MaterialMatrixMode_t matrixMode) = 0;
	/*19*/	virtual void	PushMatrix(void) = 0;
	/*20*/	virtual void	PopMatrix(void) = 0;
	/*21*/	virtual void	LoadMatrix(VMatrix const& matrix) = 0;
	/*22*/	virtual void	LoadMatrix(matrix3x4_t const& matrix) = 0;
	/*23*/	virtual void	MultMatrix(VMatrix const& matrix) = 0;
	/*24*/	virtual void	MultMatrix(matrix3x4_t const& matrix) = 0;
	/*25*/	virtual void	MultMatrixLocal(VMatrix const& matrix) = 0;
	/*26*/	virtual void	MultMatrixLocal(matrix3x4_t const& matrix) = 0;
	/*27*/	virtual void	GetMatrix(MaterialMatrixMode_t matrixMode, VMatrix *matrix) = 0;
	/*28*/	virtual void	GetMatrix(MaterialMatrixMode_t matrixMode, matrix3x4_t *matrix) = 0;
	/*29*/	virtual void	LoadIdentity(void) = 0;
	/*30*/	virtual void	Ortho(double left, double top, double right, double bottom, double zNear, double zFar) = 0;
	/*31*/	virtual void	PerspectiveX(double fovx, double aspect, double zNear, double zFar) = 0;
	/*32*/	virtual void	PickMatrix(int x, int y, int width, int height) = 0;
	/*33*/	virtual void	Rotate(float angle, float x, float y, float z) = 0;
	/*34*/	virtual void	Translate(float x, float y, float z) = 0;
	/*35*/	virtual void	Scale(float x, float y, float z) = 0;
	/*36*/	virtual void	Viewport(int x, int y, int width, int height) = 0;
	/*37*/	virtual void	GetViewport(int& x, int& y, int& width, int& height) const = 0;
	/*38*/	virtual void	CullMode(MaterialCullMode_t cullMode) = 0;
	/*39*/	virtual void	SetHeightClipMode(MaterialHeightClipMode_t nHeightClipMode) = 0;
	/*40*/	virtual void	SetHeightClipZ(float z) = 0;
	/*41*/	virtual void	FogMode(MaterialFogMode_t fogMode) = 0;
	/*42*/	virtual void	FogStart(float fStart) = 0;
	/*43*/	virtual void	FogEnd(float fEnd) = 0;
	/*44*/	virtual void	SetFogZ(float fogZ) = 0;
	/*45*/	virtual MaterialFogMode_t	GetFogMode(void) = 0;
	/*46*/	virtual void	FogColor3f(float r, float g, float b) = 0;
	/*47*/	virtual void	FogColor3fv(float const* rgb) = 0;
	/*48*/	virtual void	FogColor3ub(unsigned char r, unsigned char g, unsigned char b) = 0;
	/*49*/	virtual void	FogColor3ubv(unsigned char const* rgb) = 0;
	/*50*/	virtual void	GetFogColor(unsigned char *rgb) = 0;
	/*51*/	virtual void	SetNumBoneWeights(int numBones) = 0;
	/*52*/	virtual IMesh* CreateStaticMesh(VertexFormat_t fmt, const char *pTextureBudgetGroup, IMaterial * pMaterial = NULL) = 0;
	/*53*/	virtual void	DestroyStaticMesh(IMesh* mesh) = 0;
	/*54*/	virtual IMesh*	GetDynamicMesh(bool buffered = true, IMesh* pVertexOverride = 0, IMesh* pIndexOverride = 0, IMaterial *pAutoBind = 0) = 0;
	/*55*/	virtual IVertexBuffer *CreateStaticVertexBuffer(VertexFormat_t fmt, int nVertexCount, const char *pTextureBudgetGroup) = 0;
	/*56*/	virtual IIndexBuffer *CreateStaticIndexBuffer(MaterialIndexFormat_t fmt, int nIndexCount, const char *pTextureBudgetGroup) = 0;
	/*57*/	virtual void	DestroyVertexBuffer(IVertexBuffer *) = 0;
	/*58*/	virtual void	DestroyIndexBuffer(IIndexBuffer *) = 0;
	/*59*/	virtual IVertexBuffer *GetDynamicVertexBuffer(int streamID, VertexFormat_t vertexFormat, bool bBuffered = true) = 0;
	/*60*/	virtual IIndexBuffer *GetDynamicIndexBuffer(MaterialIndexFormat_t fmt, bool bBuffered = true) = 0;
	/*61*/	virtual void	BindVertexBuffer(int streamID, IVertexBuffer *pVertexBuffer, int nOffsetInBytes, int nFirstVertex, int nVertexCount, VertexFormat_t fmt, int nRepetitions = 1) = 0;
	/*62*/	virtual void	BindIndexBuffer(IIndexBuffer *pIndexBuffer, int nOffsetInBytes) = 0;
	/*63*/	virtual void	Draw(MaterialPrimitiveType_t primitiveType, int firstIndex, int numIndices) = 0;
	/*64*/	virtual int		SelectionMode(bool selectionMode) = 0;
	/*65*/	virtual void	SelectionBuffer(unsigned int* pBuffer, int size) = 0;
	/*66*/	virtual void	ClearSelectionNames() = 0;
	/*67*/	virtual void	LoadSelectionName(int name) = 0;
	/*68*/	virtual void	PushSelectionName(int name) = 0;
	/*69*/	virtual void	PopSelectionName() = 0;
	/*70*/	virtual void	ClearColor3ub(unsigned char r, unsigned char g, unsigned char b) = 0;
	/*71*/	virtual void	ClearColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a) = 0;
	/*72*/	virtual void	OverrideDepthEnable(bool bEnable, bool bDepthEnable) = 0;
	/*73*/	virtual void	DrawScreenSpaceQuad(IMaterial* pMaterial) = 0;
	/*74*/	virtual void	SyncToken(const char *pToken) = 0;
	/*75*/	virtual float	ComputePixelWidthOfSphere(const Vector& origin, float flRadius) = 0;
	/*76*/	virtual OcclusionQueryObjectHandle_t CreateOcclusionQueryObject(void) = 0;
	/*77*/	virtual void	DestroyOcclusionQueryObject(OcclusionQueryObjectHandle_t) = 0;
	/*78*/	virtual void	BeginOcclusionQueryDrawing(OcclusionQueryObjectHandle_t) = 0;
	/*79*/	virtual void	EndOcclusionQueryDrawing(OcclusionQueryObjectHandle_t) = 0;
	/*80*/	virtual int		OcclusionQuery_GetNumPixelsRendered(OcclusionQueryObjectHandle_t) = 0;
	/*81*/	virtual void	SetFlashlightMode(bool bEnable) = 0;
	/*82*/	virtual void	SetFlashlightState(const FlashlightState_t &state, const VMatrix &worldToTexture) = 0;
	/*83*/	virtual MaterialHeightClipMode_t GetHeightClipMode() = 0;
	/*84*/	virtual float	ComputePixelDiameterOfSphere(const Vector& vecAbsOrigin, float flRadius) = 0;
	/*85*/	virtual void	EnableUserClipTransformOverride(bool bEnable) = 0;
	/*86*/	virtual void	UserClipTransform(const VMatrix &worldToView) = 0;
	/*87*/	virtual bool	GetFlashlightMode() const = 0;
	/*88*/	virtual void	ResetOcclusionQueryObject(OcclusionQueryObjectHandle_t) = 0;
	/*89*/	virtual void	Unused3() = 0;
	/*90*/	virtual IMorph *CreateMorph(MorphFormat_t format, const char *pDebugName) = 0;
	/*91*/	virtual void	DestroyMorph(IMorph *pMorph) = 0;
	/*92*/	virtual void	BindMorph(IMorph *pMorph) = 0;
	/*93*/	virtual void	SetFlexWeights(int nFirstWeight, int nCount, const MorphWeight_t* pWeights) = 0;
	/*94*/	virtual void	Unused4() = 0;
	/*95*/	virtual void	Unused5() = 0;
	/*96*/	virtual void	Unused6() = 0;
	/*97*/	virtual void	Unused7() = 0;
	/*98*/	virtual void	Unused8() = 0;
	/*99*/	virtual void	ReadPixelsAndStretch(Rect_t *pSrcRect, Rect_t *pDstRect, unsigned char *pBuffer, ImageFormat dstFormat, int nDstStride) = 0;
	/*100*/	virtual void	GetWindowSize(int &width, int &height) const = 0;
	/*101*/	virtual void	DrawScreenSpaceRectangle(IMaterial *pMaterial, int destx, int desty, int width, int height, float src_texture_x0, float src_texture_y0, float src_texture_x1, float src_texture_y1, int src_texture_width, int src_texture_height, int nXDice = 1, int nYDice = 1) = 0;
	/*102*/	virtual void	LoadBoneMatrix(int boneIndex, const matrix3x4_t& matrix) = 0;
	/*103*/	virtual void	PushRenderTargetAndViewport() = 0;
	/*104*/	virtual void	PushRenderTargetAndViewport(ITexture *pTexture) = 0;
	/*105*/	virtual void	PushRenderTargetAndViewport(ITexture *pTexture, int nViewX, int nViewY, int nViewW, int nViewH) = 0;
	/*106*/	virtual void	PushRenderTargetAndViewport(ITexture *pTexture, ITexture *pDepthTexture, int nViewX, int nViewY, int nViewW, int nViewH) = 0;
	/*107*/	virtual void	PopRenderTargetAndViewport(void) = 0;
	/*108*/	virtual void	BindLightmapTexture(ITexture *pLightmapTexture) = 0;
	/*109*/	virtual void	CopyRenderTargetToTextureEx(ITexture *pTexture, int nRenderTargetID, Rect_t *pSrcRect, Rect_t *pDstRect = NULL) = 0;
	/*110*/	virtual void	CopyTextureToRenderTargetEx(int nRenderTargetID, ITexture *pTexture, Rect_t *pSrcRect, Rect_t *pDstRect = NULL) = 0;
	/*111*/	virtual void	PerspectiveOffCenterX(double fovx, double aspect, double zNear, double zFar, double bottom, double top, double left, double right) = 0;
	/*112*/	virtual void	SetFloatRenderingParameter(int parm_number, float value) = 0;
	/*113*/	virtual void	SetIntRenderingParameter(int parm_number, int value) = 0;
	/*114*/	virtual void	SetVectorRenderingParameter(int parm_number, Vector const &value) = 0;
	/*115*/	virtual void	SetStencilEnable(bool onoff) = 0;
	/*116*/	virtual void	SetStencilFailOperation(StencilOperation_t op) = 0;
	/*117*/	virtual void	SetStencilZFailOperation(StencilOperation_t op) = 0;
	/*118*/	virtual void	SetStencilPassOperation(StencilOperation_t op) = 0;
	/*119*/	virtual void	SetStencilCompareFunction(StencilComparisonFunction_t cmpfn) = 0;
	/*120*/	virtual void	SetStencilReferenceValue(int ref) = 0;
	/*121*/	virtual void	SetStencilTestMask(UINT32 msk) = 0;
	/*122*/	virtual void	SetStencilWriteMask(UINT32 msk) = 0;
	/*123*/	virtual void	ClearStencilBufferRectangle(int xmin, int ymin, int xmax, int ymax, int value) = 0;
	/*124*/	virtual void	SetRenderTargetEx(int nRenderTargetID, ITexture *pTexture) = 0;
	/*125*/	virtual void	PushCustomClipPlane(const float *pPlane) = 0;
	/*126*/	virtual void	PopCustomClipPlane(void) = 0;
	/*127*/	virtual void	GetMaxToRender(IMesh *pMesh, bool bMaxUntilFlush, int *pMaxVerts, int *pMaxIndices) = 0;
	/*128*/	virtual int		GetMaxVerticesToRender(IMaterial *pMaterial) = 0;
	/*129*/	virtual int		GetMaxIndicesToRender() = 0;
	/*130*/	virtual void	DisableAllLocalLights() = 0;
	/*131*/	virtual int		CompareMaterialCombos(IMaterial *pMaterial1, IMaterial *pMaterial2, int lightMapID1, int lightMapID2) = 0;
	/*132*/	virtual IMesh*	GetFlexMesh() = 0;
	/*133*/	virtual void	SetFlashlightStateEx(const FlashlightState_t &state, const VMatrix &worldToTexture, ITexture *pFlashlightDepthTexture) = 0;
	/*134*/	virtual ITexture *GetLocalCubemap() = 0;
	/*135*/	virtual void	ClearBuffersObeyStencil(bool bClearColor, bool bClearDepth) = 0;
	/*136*/	virtual bool	EnableClipping(bool bEnable) = 0;
	/*137*/	virtual void	GetFogDistances(float *fStart, float *fEnd, float *fFogZ) = 0;
	/*138*/	virtual void	BeginPIXEvent(unsigned long color, const char *szName) = 0;
	/*139*/	virtual void	EndPIXEvent() = 0;
	/*140*/	virtual void	SetPIXMarker(unsigned long color, const char *szName) = 0;
	/*141*/	virtual void	BeginBatch(IMesh* pIndices) = 0;
	/*142*/	virtual void	BindBatch(IMesh* pVertices, IMaterial *pAutoBind = NULL) = 0;
	/*143*/	virtual void	DrawBatch(int firstIndex, int numIndices) = 0;
	/*144*/	virtual void	EndBatch() = 0;
	/*145*/	virtual ICallQueue *GetCallQueue() = 0;
	/*146*/	virtual void	GetWorldSpaceCameraPosition(Vector *pCameraPos) = 0;
	/*147*/	virtual void	GetWorldSpaceCameraVectors(Vector *pVecForward, Vector *pVecRight, Vector *pVecUp) = 0;
	/*148*/	virtual void	ResetToneMappingScale(float monoscale) = 0; 			// set scale to monoscale instantly with no chasing
	/*149*/	virtual void	SetGoalToneMappingScale(float monoscale) = 0;
	/*150*/	virtual void	TurnOnToneMapping() = 0;
	/*151*/	virtual void	SetToneMappingScaleLinear(const Vector &scale) = 0;
	/*152*/	virtual Vector	GetToneMappingScaleLinear(void) = 0;
	/*153*/	virtual void	SetShadowDepthBiasFactors(float fSlopeScaleDepthBias, float fDepthBias) = 0;
	/*154*/	virtual void	PerformFullScreenStencilOperation(void) = 0;
	/*155*/	virtual void	SetLightingOrigin(Vector vLightingOrigin) = 0;
	/*156*/	virtual void	SetScissorRect(const int nLeft, const int nTop, const int nRight, const int nBottom, const bool bEnableScissor) = 0;
	/*157*/	virtual void	BeginMorphAccumulation() = 0;
	/*158*/	virtual void	EndMorphAccumulation() = 0;
	/*159*/	virtual void	AccumulateMorph(IMorph* pMorph, int nMorphCount, const MorphWeight_t* pWeights) = 0;
	/*160*/	virtual void	PushDeformation(DeformationBase_t const *Deformation) = 0;
	/*161*/	virtual void	PopDeformation() = 0;
	/*162*/	virtual int		GetNumActiveDeformations() const = 0;
	/*163*/	virtual bool	GetMorphAccumulatorTexCoord(Vector2D *pTexCoord, IMorph *pMorph, int nVertex) = 0;
	/*164*/	virtual IMesh*	GetDynamicMeshEx(VertexFormat_t vertexFormat, bool bBuffered = true, IMesh* pVertexOverride = 0, IMesh* pIndexOverride = 0, IMaterial *pAutoBind = 0) = 0;
	/*165*/	virtual void	FogMaxDensity(float flMaxDensity) = 0;
	/*166*/	virtual IMaterial*	GetCurrentMaterial() = 0;
	/*167*/	virtual int		GetCurrentNumBones() const = 0;
	/*168*/	virtual void*	GetCurrentProxy() = 0;
	/*169*/	virtual void	EnableColorCorrection(bool bEnable) = 0;
	/*170*/	virtual ColorCorrectionHandle_t AddLookup(const char *pName) = 0;
	/*171*/	virtual bool	RemoveLookup(ColorCorrectionHandle_t handle) = 0;
	/*172*/	virtual void	LockLookup(ColorCorrectionHandle_t handle) = 0;
	/*173*/	virtual void	LoadLookup(ColorCorrectionHandle_t handle, const char *pLookupName) = 0;
	/*174*/	virtual void	UnlockLookup(ColorCorrectionHandle_t handle) = 0;
	/*175*/	virtual void	SetLookupWeight(ColorCorrectionHandle_t handle, float flWeight) = 0;
	/*176*/	virtual void	ResetLookupWeights() = 0;
	/*177*/	virtual void	SetResetable(ColorCorrectionHandle_t handle, bool bResetable) = 0;
	/*178*/	virtual void	SetFullScreenDepthTextureValidityFlag(bool bIsValid) = 0;
	/*179*/	virtual void	SetNonInteractivePacifierTexture(ITexture *pTexture, float flNormalizedX, float flNormalizedY, float flNormalizedSize) = 0;
	/*180*/	virtual void	SetNonInteractiveTempFullscreenBuffer(ITexture *pTexture, MaterialNonInteractiveMode_t mode) = 0;
	/*181*/	virtual void	EnableNonInteractiveMode(MaterialNonInteractiveMode_t mode) = 0;
	/*182*/	virtual void	RefreshFrontBufferNonInteractive() = 0;
	/*183*/	virtual void*	LockRenderData(int nSizeInBytes) = 0;
	/*184*/	virtual void	UnlockRenderData(void *pData) = 0;
	/*185*/	virtual void	AddRefRenderData() = 0;
	/*186*/	virtual void	ReleaseRenderData() = 0;
	/*187*/	virtual bool	IsRenderData(const void *pData) const = 0;
	/*188*/	virtual void	PrintfVA(char *fmt, va_list vargs) = 0;
	/*189*/	virtual void	Printf(PRINTF_FORMAT_STRING const char *fmt, ...) = 0;
	/*190*/	virtual float	Knob(char *knobname, float *setvalue = NULL) = 0;
	/*191*/	virtual void	OverrideAlphaWriteEnable(bool bEnable, bool bAlphaWriteEnable) = 0;
	/*192*/	virtual void	OverrideColorWriteEnable(bool bOverrideEnable, bool bColorWriteEnable) = 0;
	/*193*/	virtual void	ClearBuffersObeyStencilEx(bool bClearColor, bool bClearAlpha, bool bClearDepth) = 0;
	// there's more shit below this but I'm lazy lol.
};